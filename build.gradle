plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.iot.devices.management'
version = '0.0.1-SNAPSHOT'
description = 'Service for reading telemetries and applying alerting rules to them'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url = uri("https://packages.confluent.io/maven/")
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.confluent:kafka-avro-serializer:7.9.2'
	implementation 'io.confluent:kafka-streams-avro-serde:7.9.2'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'com.iot.devices.avro.schemas:avro-schemas:1.0.1-SNAPSHOT'
	implementation 'com.iot.alerts.avro.schemas:avro-schemas:0.0.1-SNAPSHOT'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('bootBuildImage') {
	runImage = 'paketobuildpacks/ubuntu-noble-run-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}
