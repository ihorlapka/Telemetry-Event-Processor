server:
  port: 8085
spring:
  application:
    name: telemetry-events-processor
tep:
  kafka:
    input-telemetries-topic: iot-devices-data
    input-alerting-rules-topic: iot-alerting-rules
    output-alerts-topic: iot-devices-alerts
    properties:
      application.id: telemetry-events-processor
      bootstrap.servers: localhost:9092
      default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
      schema.registry.url: mock://my-scope:8081
      commit.interval.ms: 1000
      statestore.cache.max.bytes: 10485760
      specific.avro.reader: true
      auto.register.schemas: true
      default.deserialization.exception.handler: com.iot.devices.management.telemetry_event_processor.exceptions.handler.TelemetriesExceptionHandler
test:
  kafka:
    producer:
      telemetries:
        properties:
          bootstrap.servers: localhost:9092
          key.serializer: org.apache.kafka.common.serialization.StringSerializer
          value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
          schema.registry.url: mock://my-scope:8081
      alerting-rules:
        properties:
          bootstrap.servers: localhost:9092
          key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
          value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
          schema.registry.url: mock://my-scope:8081
    consumer:
      properties:
        bootstrap.server: localhost:9092
        group.id: iot-test
        key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
        schema.registry.url: mock://my-scope:8081
        specific.avro.reader: true
        auto.offset.reset: earliest
        enable.auto.commit: false
        max.poll.records: 500
        max.poll.interval: 300000
        fetch.min.bytes: 1
        fetch.max.wait.ms: 5000